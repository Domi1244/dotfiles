set nocompatible

" Leader
let mapleader = ","

" Settings
set nobackup
set nowritebackup
set noswapfile
set history=50
set noerrorbells
set showmatch
set laststatus=2
set showmode
set showcmd
set ruler
set cursorline
set clipboard=unnamed
set backspace=indent,eol,start
set wrap
set linebreak

" Search
set hlsearch
set ignorecase
set incsearch

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  au BufNewFile,BufRead *.md set filetype=markdown
  au BufNewFile,BufRead *.json set filetype=javascript

augroup END

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Numbers
set relativenumber
set numberwidth=4

" Softtabs, 2 Spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
filetype indent on

" activate Snippets with Shift + Tab
let g:snippetsEmu_key = "<S-Tab>"

" How dare you!
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>"

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1

" =======================================
" Searching in Files
" =======================================

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" =======================================
" Statusline Config
" =======================================
set statusline=%f
set statusline+=%{fugitive#statusline()}\
set statusline+=\ [line\ %l\/%L]
set statusline+=%m

" =======================================
" Bundle Config
" =======================================

" emmet
let g:user_emmet_expandabbr_key = '<c-e>'
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss EmmetInstall

" =======================================
" Load Local config
" =======================================
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

" Colorscheme
colorscheme jellybeans

" Mappings
nnoremap <leader><space> :noh<cr>
